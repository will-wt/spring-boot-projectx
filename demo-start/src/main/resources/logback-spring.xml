<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时,配置文件如果发生改变,将会被重新加载,默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔,如果没有给出时间单位,默认单位是毫秒当scan为true时,此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时,将打印出logback内部日志信息,实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!-- logback.xml加载顺序早于application.properties，需要通过springProperty标签来获取应用变量 -->
    <springProperty scope="context" name="LOG_HOME" source="log.basedir"/>

    <!-- 日志输出格式：
            %d表示日期时间,
            %thread表示线程名,
            %-5level：级别从左显示5个字符宽度
            %logger{50} 表示logger名字最长50个字符,否则按照句点分割。
            %msg：日志消息,
            %n是换行符
     -->
    <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level ${PID:-} --- [%t] %logger{50} - %msg%n"/>


    <!-- Appender: 设置日志信息的去向-->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <target>System.out</target>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="appAppenderSync" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/app.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/app.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxHistory>14</maxHistory>
            <totalSizeCap>5GB</totalSizeCap>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>256MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
    </appender>
    <!-- 异步输出日志-->
    <appender name="appAppender" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="appAppenderSync"/>
        <!-- 设置队列满了时是否会阻塞，默认为false，为true时，当队列满时会直接丢弃日志，可以提升性能 -->
        <neverBlock>true</neverBlock>
        <!-- 设置异步阻塞队列的大小，设置大一些可以降低日志丢失的概率，但该值会影响性能。默认值为256 -->
        <queueSize>512</queueSize>
    </appender>


    <appender name="errorAppenderSync" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/error.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxHistory>14</maxHistory>
            <totalSizeCap>5GB</totalSizeCap>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>256MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
    </appender>
    <appender name="errorAppender" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="errorAppenderSync"/>
        <neverBlock>true</neverBlock>
    </appender>



    <!-- 自定义logger-->
    <logger name="java.sql" level="info" additivity="false">
        <appender-ref ref="appAppender"/>
        <appender-ref ref="errorAppender"/>
    </logger>

    <logger name="appLog" level="info" additivity="false">
        <appender-ref ref="appAppender"/>
        <appender-ref ref="errorAppender"/>
    </logger>



    <!-- 默认的logger-->
    <root level="info">
        <appender-ref ref="stdout"/>
        <appender-ref ref="appAppender"/>
        <appender-ref ref="errorAppender"/>
    </root>

</configuration>
